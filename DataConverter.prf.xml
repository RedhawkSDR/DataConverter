<?xml version="1.0" encoding="UTF-8"?>
<!-- 
 This file is protected by Copyright. Please refer to the COPYRIGHT file
 distributed with this source distribution.
 
 This file is part of REDHAWK Basic Components DataConverter.
 
 REDHAWK Basic Components DataConverter is free software: you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation, either version 3 of the License, or (at your
 option) any later version.
 
 REDHAWK Basic Components DataConverter is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see http://www.gnu.org/licenses/.
-->
<!DOCTYPE properties PUBLIC "-//JTRS//DTD SCA V2.2.2 PRF//EN" "properties.dtd">
<properties>
  <simple id="outputType" mode="readwrite" type="short">
    <description>Defines the mode of the output.  If set to 2 (Complex), the output will be complex.  If real data is pushed into the component, a hilbert transform will take place to convert the data.  The exact behavior of the complex output mode depends on the settings within the transformProperties structure.  If  the outputType property set to 1 (Real), the output will be Real, and a Complex to Real conversion will take place if complex data is pushed into the component.  When a Complex to Real conversion takes place, it is expected that the incoming complex data is centered at zero, and the real output data will be centered at Fs/4, hence doubling the sample rate.  The 0 (PassThrough) value means that the mode of the output will mimic that of the input, and no Complex/Real transforms will occur.</description>
    <value>0</value>
    <enumerations>
      <enumeration label="Complex" value="2"/>
      <enumeration label="Real" value="1"/>
      <enumeration label="PassThrough" value="0"/>
    </enumerations>
    <kind kindtype="property"/>
    <action type="external"/>
  </simple>
  <simple id="maxTransferSize" mode="readwrite" type="long">
    <description>This property limits the maximum size of the output transfer.  If this value is set to 0 (default) the number samples of the output will mimic the number of samples of the input, unless it happens to exceed the corba transfer limit of 2MB.  </description>
    <value>0</value>
    <units>samples</units>
    <kind kindtype="property"/>
    <action type="external"/>
  </simple>
  <struct id="scaleOutput" mode="readwrite">
    <description>These settings are used to scale the output to maximize the range of the data type. </description>
    <simple id="scaleOutput::charPort" name="charPort" type="boolean">
      <description>Used to scale the output port to maximize the range of signed chars.</description>
      <value>true</value>
    </simple>
    <simple id="scaleOutput::octetPort" mode="readwrite" name="octetPort" type="boolean">
      <description>Used to scale the output port to maximize the range of unsigned chars.</description>
      <value>true</value>
    </simple>
    <simple id="scaleOutput::shortPort" mode="readwrite" name="shortPort" type="boolean">
      <description>Used to scale the output port to maximize the range of shorts. </description>
      <value>true</value>
    </simple>
    <simple id="scaleOutput::ushortPort" mode="readwrite" name="ushortPort" type="boolean">
      <description>Used to scale the output port to maximize the range of unsigned shorts. </description>
      <value>true</value>
    </simple>
    <configurationkind kindtype="property"/>
  </struct>
  <struct id="normalize_floating_point" mode="readwrite">
    <description>These values set if the input or output float port values shall be between -1 and 1. Applies to both Float and Double types.</description>
    <simple id="normalize_floating_point::input" name="input" type="boolean">
      <description>Setting this value to true means that with floating point input will be normalized between -1.0 and 1.0.  A value of false will not convert the input.  </description>
      <value>true</value>
    </simple>
    <simple id="normalize_floating_point::output" mode="readwrite" name="output" type="boolean">
      <description>Setting this value to true means that with floating point output will be normalized between -1.0 and 1.0.  A value of false will not convert the output. </description>
      <value>true</value>
    </simple>
    <configurationkind kindtype="property"/>
  </struct>
  <struct id="floatingPointRange" mode="readwrite">
    <description>These values specify the range of the floating point values on the input.</description>
    <simple id="floatingPointRange::minimum" name="minimum" type="double">
      <description>The minimum floating point value in the input stream.</description>
      <value>0.0</value>
    </simple>
    <simple id="floatingPointRange::maximum" mode="readwrite" name="maximum" type="double">
      <description>The maximum floating point value in the input stream.</description>
      <value>3.402823466e38</value>
    </simple>
    <configurationkind kindtype="property"/>
  </struct>
  <struct id="advancedSRI" mode="readwrite">
    <description>These are used in the real-to-complex and complex-to-real to correct the col_rf and chan_rf keywords due to inherent frequency translation.</description>
    <simple id="advancedSRI::update_col_rf_keyword" name="update_col_rf_keyword" type="boolean">
      <description>Flag to update the col_rf keyword... this is normally used during real-to-complex or complex-to-real transforms.</description>
      <value>true</value>
    </simple>
    <simple id="advancedSRI::update_chan_rf_keyword" mode="readwrite" name="update_chan_rf_keyword" type="boolean">
      <description>Flag used to update the chan_rf keyword... this is normally used during real-to-complex or complex-to-real transforms.</description>
      <value>true</value>
    </simple>
    <configurationkind kindtype="property"/>
  </struct>
  <struct id="transformProperties" mode="readwrite">
    <description>Used only in real-to-complex and complex-to-real cases to setup transform unique properties.</description>
    <simple id="transformProperties::tune_fs_over_4" name="tune_fs_over_4" type="boolean">
      <description>This value is used during the real-to-complex transform only.  If your real input is centered at fs/4, setting this property to true will allow the complex output to be centered at zero, and the output sample rate will be half of the input sample rate. When this property is set to false (default), the ouput sample rate will be the same as the input sample rate, and no tuning will occur. </description>
      <value>false</value>
    </simple>
    <simple id="transformProperties::fftSize" mode="readwrite" name="fftSize" type="long">
      <description>The size of the fft used during real-to-complex, and complex-to-real transformations.</description>
      <value>2048</value>
    </simple>
    <simple id="transformProperties::overlap_percentage" mode="readwrite" name="overlap_percentage" type="double">
      <description>This value is used during the real-to-complex transform only.  It is used to define the percentage of overlap with relation to the fftSize.  This value also determines the size of the filter used during the hilbert transform.  It is not recommended to change this value from the default of 25 percent.</description>
      <value>25</value>
      <units>percentage</units>
    </simple>
    <simple id="transformProperties::lowCutoff" mode="readwrite" name="lowCutoff" type="double">
      <description>This value is used during the real-to-complex transform only.  It is used to set the low cutoff frequency on the hilbert filter. It is not recommended to change this value from the default.</description>
      <value>.001</value>
    </simple>
    <simple id="transformProperties::highCutoff" mode="readwrite" name="highCutoff" type="double">
      <description>This value is used during the real-to-complex transform only.  It is used to set the high cutoff frequency on the hilbert filter. It is not recommended to change this value from the default.</description>
      <value>.499</value>
    </simple>
    <simple id="transformProperties::transitionWidth" mode="readwrite" name="transitionWidth" type="double">
      <description>This value is used during the real-to-complex transform only.  It is used to set the high transition bandwidth on the creation of the hilbert filter. It is not recommended to change this value from the default.</description>
      <value>.001</value>
    </simple>
    <configurationkind kindtype="property"/>
  </struct>
</properties>
